# Update AKS context
connectAKS="$HOME/.connect-aks-squad.sh"
test -x $connectAKS && $connectAKS
alias updateAKS='$connectAKS'
alias updateAKSforce='rm $HOME/.kube/azure/.lastupdate && updateAKS'

# Homebrew settings
if [ $(uname -s) == "Darwin" ]; then
  BREWDIR="/opt/homebrew/bin/brew"
  test -x $BREWDIR && eval "$($BREWDIR shellenv)" 
elif [ $(uname -s) == "Linux" ]; then
  BREWDIR="/home/linuxbrew/.linuxbrew/bin/brew"
  test -x $BREWDIR && eval "$($BREWDIR shellenv)"
fi

command -v brew >/dev/null 2>&1 && export HOMEBREW_EDITOR=vim

# Kubernetes cheats
export PATH="$PATH:${HOME}/.local/bin:${HOME}/.krew/bin"
export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/azure/config
complete -F __start_kubectl k
alias k=kubectl kx=kubectx kn=kubens
alias kunset="kubectl config unset current-context; kubectl config unset current-context &>/dev/null"

# Python
alias py=python3
if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
  export WORKON_HOME=~/.virtualenvs
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  export VIRTUALENVWRAPPER_VIRRTUALENV=/usr/local/bin/virtualenv
  source /usr/local/bin/virtualenvwrapper.sh
fi

# Functions
findhere() { find . -name "*$1*"; }
opensslcert() { openssl s_client -showcerts -connect $1:443; }
curlcert() { curl $1 -vI --stderr -; }
kexec() { kubectl exec -it $1 -- sh -c "clear; (bash || ash || sh)"; }
