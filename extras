# Homebrew settings
if [ $(uname -s) == "Darwin" ]; then
  BREWDIR="/opt/homebrew/bin/brew"
  test -x $BREWDIR && eval "$($BREWDIR shellenv)"
elif [ $(uname -s) == "Linux" ]; then
  BREWDIR="/home/linuxbrew/.linuxbrew/bin/brew"
  test -x $BREWDIR && eval "$($BREWDIR shellenv)"
fi

command -v brew >/dev/null 2>&1 && export HOMEBREW_EDITOR=vim

# Kubernetes cheats
export PATH="$PATH:${HOME}/.local/bin:${HOME}/.krew/bin"
export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/azure/config
alias k=kubectl kx=kubectx kn=kubens
alias kunset="kubectl config unset current-context; kubectl config unset current-context &>/dev/null"
complete -o default -F __start_kubectl k
source <(kubectl completion bash)

# Python
alias py=python3
if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
  export WORKON_HOME=~/.virtualenvs
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  export VIRTUALENVWRAPPER_VIRRTUALENV=/usr/local/bin/virtualenv
  source /usr/local/bin/virtualenvwrapper.sh
fi

# Terraform alias
alias tf="terraform"
alias tfp="terraform plan -out=plan.tfplan --parallelism 2000"
alias tfa="terraform apply 'plan.tfplan'"
alias tfi="terraform init && terraform get -update"
alias tfw="terraform workspace"
alias tfwl="terraform workspace list"
alias tfws="terraform workspace select"
alias tfs="terraform state"
alias tfv="terraform validate"
alias tfip="tfi && tfp"

# AWS alias
AWS_PROFILE_DEV=$(aws configure list-profiles | grep "dev" | head -1 )
test $AWS_PROFILE_DEV && export AWS_DEFAULT_PROFILE=$AWS_PROFILE_DEV
test $AWS_PROFILE_DEV && export AWS_PROFILE=$AWS_PROFILE_DEV

for profile in $(aws configure list-profiles); do
  alias aws-$profile="aws --profile $profile"
  alias aws-set-$profile="export AWS_DEFAULT_PROFILE=$profile"
  alias e1s-$profile="e1s --profile=$profile"
done

# OpenVPN
alias ovpn-c="openvpn3 session-start --config ~/.client.ovpn"
alias ovpn-d="openvpn3 session-manage --config ~/.client.ovpn --disconnect"

# Functions
findhere() { find . -name "*$1*"; }
opensslcert() { openssl s_client -showcerts -connect $1:443; }
curlcert() { curl $1 -vI --stderr -; }
kexec() { kubectl exec -it $1 -- sh -c "clear; (bash || ash || sh)"; }
extractkey() { openssl pkcs12 -in $1 -nocerts -out "new.key" && openssl rsa -in "new.key" -out "private.key"; }
extractpublic() { openssl pkcs12 -in $1 -clcerts -nokeys -out "public.crt"; }
extractca() { openssl pkcs12 -in $1 -cacerts -nokeys -chain -out "ca.crt"; }
