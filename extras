## Homebrew settings
if [ $(uname -s) == "Darwin" ]; then
  BREWDIR="/opt/homebrew/bin/brew"
elif [ $(uname -s) == "Linux" ]; then
  BREWDIR="/home/linuxbrew/.linuxbrew/bin/brew"
fi

test -x $BREWDIR && eval "$($BREWDIR shellenv)"
export HOMEBREW_EDITOR=vim

## Kubernetes cheats
export PATH="$PATH:${HOME}/.local/bin:${HOME}/.krew/bin"
export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/azure/config
alias k=kubectl kx=kubectx kn=kubens
alias kunset="kubectl config unset current-context; kubectl config unset current-context &>/dev/null"
complete -o default -F __start_kubectl k
source <(kubectl completion bash)

## Python
alias py=python3
if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
  export WORKON_HOME=~/.virtualenvs
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  export VIRTUALENVWRAPPER_VIRRTUALENV=/usr/local/bin/virtualenv
  source /usr/local/bin/virtualenvwrapper.sh
fi

## Terraform alias
alias tf="terraform"
alias tfp="terraform plan -out=plan.tfplan --parallelism 2000"
alias tfa="terraform apply 'plan.tfplan'"
alias tfi="terraform init && terraform get -update"
alias tfw="terraform workspace"
alias tfwl="terraform workspace list"
alias tfws="terraform workspace select"
alias tfs="terraform state"
alias tfv="terraform validate"
alias tfip="tfi && tfp"

## AWS alias
AWS_PROFILE_DEV=$(aws configure list-profiles | grep "dev" | head -1 )
test $AWS_PROFILE_DEV && export AWS_DEFAULT_PROFILE=$AWS_PROFILE_DEV

for profile in $(aws configure list-profiles); do
  alias aws-$profile="aws --profile $profile"
  alias aws-set-$profile="export AWS_DEFAULT_PROFILE=$profile"
  alias e1s-$profile="e1s --profile=$profile"
done

## OpenVPN
alias ovpn-c="openvpn3 session-start --config ~/.client.ovpn"
alias ovpn-d="openvpn3 session-manage --config ~/.client.ovpn --disconnect"

### Functions
function findhere() { find . -name "*$1*"; }
function opensslcert() { openssl s_client -showcerts -connect $1:443; }
function curlcert() { curl $1 -vI --stderr -; }
function kexec() { kubectl exec -it $1 -- sh -c "clear; (bash || ash || sh)"; }
function extractkey() { openssl pkcs12 -in $1 -nocerts -out "new.key" && openssl rsa -in "new.key" -out "private.key"; }
function extractpublic() { openssl pkcs12 -in $1 -clcerts -nokeys -out "public.crt"; }
function extractca() { openssl pkcs12 -in $1 -cacerts -nokeys -chain -out "ca.crt"; }

## AWS MFA
function aws-mfa() {
local SOURCE_PROFILE=$(aws_profile)
local MFA_PROFILE="mfa"

local MFA_DEVICE_ARN=$(aws configure get mfa_device_arn --profile $SOURCE_PROFILE)
if [ -z "$MFA_DEVICE_ARN" ]; then
echo "Error: MFA device ARN not found in the ~/.aws/credentials file for profile $SOURCE_PROFILE"
return 1
fi

echo "Enter your MFA token code:"
read MFA_CODE

local CREDENTIALS=$(aws sts get-session-token \
--serial-number "$MFA_DEVICE_ARN" \
--token-code "$MFA_CODE" \
--profile "$SOURCE_PROFILE" \
--output json 2>/dev/null)

if [ $? -ne 0 ]; then
echo "Error: Failed to obtain temporary credentials. Please check your MFA token code and try again."
return 1
fi

# Extract the credentials from the JSON response
local ACCESS_KEY=$(echo "$CREDENTIALS" | jq -r '.Credentials.AccessKeyId')
local SECRET_KEY=$(echo "$CREDENTIALS" | jq -r '.Credentials.SecretAccessKey')
local SESSION_TOKEN=$(echo "$CREDENTIALS" | jq -r '.Credentials.SessionToken')
local EXPIRATION=$(echo "$CREDENTIALS" | jq -r '.Credentials.Expiration')

# Check if the credentials are not empty
if [ -z "$ACCESS_KEY" ] || [ -z "$SECRET_KEY" ] || [ -z "$SESSION_TOKEN" ]; then
echo "Error: Failed to parse temporary credentials. Please try again."
return 1
fi

# Store the temporary credentials in the MFA profile
aws configure set aws_access_key_id "$ACCESS_KEY" --profile "$MFA_PROFILE"
aws configure set aws_secret_access_key "$SECRET_KEY" --profile "$MFA_PROFILE"
aws configure set aws_session_token "$SESSION_TOKEN" --profile "$MFA_PROFILE"

echo "Temporary credentials have been set for the '$MFA_PROFILE' profile. They will expire on $EXPIRATION."

# Export the AWS_PROFILE environment variable to use the MFA profile
export AWS_PROFILE="$MFA_PROFILE"
echo "AWS_PROFILE environment variable set to '$MFA_PROFILE'." 
}